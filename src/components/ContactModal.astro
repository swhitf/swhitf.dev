---
// Contact Modal Component
---

<div id="contactModal" class="hidden fixed inset-0 z-[100] overflow-y-auto">
  <!-- Backdrop -->
  <div class="fixed inset-0 bg-black/70 backdrop-blur-sm transition-opacity" id="modalBackdrop"></div>

  <!-- Modal Container -->
  <div class="flex min-h-full items-center justify-center p-4">
    <div class="relative bg-[#0b0b10] border border-white/20 rounded-2xl shadow-2xl w-full max-w-lg p-8 transform transition-all">
      <!-- Close Button -->
      <button
        type="button"
        id="closeModal"
        class="absolute top-4 right-4 text-white/60 hover:text-white transition-colors"
        aria-label="Close modal"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>

      <!-- Modal Header -->
      <div class="mb-6">
        <h2 class="text-3xl font-bold text-white mb-2">Say Hello ðŸ‘‹</h2>
        <p class="text-white/70">
          Whatever you write here will be sent to me as a DM on Slack. Feel free to leave your email if you'd like me to write back!
        </p>
      </div>

      <!-- Form -->
      <form id="contactForm" class="space-y-4">
        <!-- Email Input -->
        <div>
          <label for="email" class="block text-sm font-medium text-white/80 mb-2">
            Your Email (optional)
          </label>
          <input
            type="email"
            id="email"
            name="email"
            placeholder="your.email@example.com"
            class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-lg text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-all"
          />
        </div>

        <!-- Message Textarea -->
        <div>
          <label for="message" class="block text-sm font-medium text-white/80 mb-2">
            Your Message <span class="text-red-400">*</span>
          </label>
          <textarea
            id="message"
            name="message"
            required
            maxlength="500"
            rows="6"
            placeholder="Hey Steve, I wanted to reach out about..."
            class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-lg text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-all resize-none"
          ></textarea>
          <div class="text-right text-sm text-white/40 mt-1">
            <span id="charCount">0</span>/500
          </div>
        </div>

        <!-- Submit Button -->
        <div class="flex gap-3 pt-2">
          <button
            type="submit"
            id="submitButton"
            class="flex-1 bg-teal-500 text-white px-6 py-3 font-medium rounded-lg hover:bg-teal-600 transition-all hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100"
          >
            Send Message
          </button>
          <button
            type="button"
            id="cancelButton"
            class="px-6 py-3 font-medium text-white/80 hover:text-white border border-white/10 rounded-lg hover:bg-white/5 transition-all"
          >
            Cancel
          </button>
        </div>

        <!-- Status Message -->
        <div id="statusMessage" class="hidden mt-4 p-4 rounded-lg"></div>
      </form>
    </div>
  </div>
</div>

<script>
  const modal = document.getElementById('contactModal');
  const closeModalBtn = document.getElementById('closeModal');
  const cancelBtn = document.getElementById('cancelButton');
  const modalBackdrop = document.getElementById('modalBackdrop');
  const form = document.getElementById('contactForm') as HTMLFormElement;
  const statusMessage = document.getElementById('statusMessage');
  const submitButton = document.getElementById('submitButton');
  const messageTextarea = document.getElementById('message') as HTMLTextAreaElement;
  const charCount = document.getElementById('charCount');

  // Character counter
  messageTextarea?.addEventListener('input', () => {
    if (charCount) {
      charCount.textContent = messageTextarea.value.length.toString();
    }
  });

  // Function to open modal
  function openModal() {
    modal?.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  }

  // Function to close modal
  function closeModal() {
    modal?.classList.add('hidden');
    document.body.style.overflow = '';
    form?.reset();
    statusMessage?.classList.add('hidden');
  }

  // Event listeners
  closeModalBtn?.addEventListener('click', closeModal);
  cancelBtn?.addEventListener('click', closeModal);
  modalBackdrop?.addEventListener('click', closeModal);

  // Expose openModal globally so the button can call it
  (window as any).openContactModal = openModal;

  // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const email = formData.get('email') as string;
    const message = formData.get('message') as string;

    if (!message.trim()) {
      return;
    }

    // Disable submit button
    if (submitButton) {
      submitButton.setAttribute('disabled', 'true');
      submitButton.textContent = 'Sending...';
    }

    try {
      const response = await fetch('https://faas-ams3-2a2df116.doserverless.co/api/v1/namespaces/fn-78a1069f-e39f-4ba3-aefa-37e804322060/actions/contact_me?blocking=true&result=true', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Basic ZTA4Y2Q2M2MtY2MyZi00ZGI3LTljOTEtNzQ5YTc3MThlZjg1OlBtclFIcFg4aEtzVEpSZmwwRTZ6M0JYV3E5RG0xNUVpMm51NzlHTGs2bXZJSFBaUm9aemRSeWNuUjFrcGh2a3Y=',
        },
        body: JSON.stringify({ email: email || '', message }),
      });

      if (response.ok) {
        // Success
        if (statusMessage) {
          statusMessage.textContent = 'Message sent! I\'ll get back to you soon.';
          statusMessage.className = 'mt-4 p-4 rounded-lg bg-teal-500/20 text-teal-300 border border-teal-500/30';
          statusMessage.classList.remove('hidden');
        }

        // Close modal after 2 seconds
        setTimeout(() => {
          closeModal();
        }, 2000);
      } else {
        throw new Error('Failed to send message');
      }
    } catch (error) {
      // Error
      if (statusMessage) {
        statusMessage.textContent = 'Failed to send message. Please try emailing me directly at hello@swhitf.dev';
        statusMessage.className = 'mt-4 p-4 rounded-lg bg-red-500/20 text-red-300 border border-red-500/30';
        statusMessage.classList.remove('hidden');
      }
    } finally {
      // Re-enable submit button
      if (submitButton) {
        submitButton.removeAttribute('disabled');
        submitButton.textContent = 'Send Message';
      }
    }
  });

  // Close on Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !modal?.classList.contains('hidden')) {
      closeModal();
    }
  });
</script>
